// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OnLoginRequest struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnLoginRequest) Reset()         { *m = OnLoginRequest{} }
func (m *OnLoginRequest) String() string { return proto.CompactTextString(m) }
func (*OnLoginRequest) ProtoMessage()    {}
func (*OnLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *OnLoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OnLoginRequest.Unmarshal(m, b)
}
func (m *OnLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OnLoginRequest.Marshal(b, m, deterministic)
}
func (m *OnLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnLoginRequest.Merge(m, src)
}
func (m *OnLoginRequest) XXX_Size() int {
	return xxx_messageInfo_OnLoginRequest.Size(m)
}
func (m *OnLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OnLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OnLoginRequest proto.InternalMessageInfo

func (m *OnLoginRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type OnLoginResponse struct {
	Openid               string   `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	Sid                  string   `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnLoginResponse) Reset()         { *m = OnLoginResponse{} }
func (m *OnLoginResponse) String() string { return proto.CompactTextString(m) }
func (*OnLoginResponse) ProtoMessage()    {}
func (*OnLoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}

func (m *OnLoginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OnLoginResponse.Unmarshal(m, b)
}
func (m *OnLoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OnLoginResponse.Marshal(b, m, deterministic)
}
func (m *OnLoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnLoginResponse.Merge(m, src)
}
func (m *OnLoginResponse) XXX_Size() int {
	return xxx_messageInfo_OnLoginResponse.Size(m)
}
func (m *OnLoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OnLoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OnLoginResponse proto.InternalMessageInfo

func (m *OnLoginResponse) GetOpenid() string {
	if m != nil {
		return m.Openid
	}
	return ""
}

func (m *OnLoginResponse) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func init() {
	proto.RegisterType((*OnLoginRequest)(nil), "OnLoginRequest")
	proto.RegisterType((*OnLoginResponse)(nil), "OnLoginResponse")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe1, 0xe2, 0xf3, 0xcf, 0xf3, 0xc9,
	0x4f, 0xcf, 0xcc, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x49, 0xce,
	0x4f, 0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xac, 0xb9, 0xf8, 0xe1,
	0xaa, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xc4, 0xb8, 0xd8, 0xf2, 0x0b, 0x52, 0xf3, 0x32,
	0x53, 0xa0, 0x0a, 0xa1, 0x3c, 0x21, 0x01, 0x2e, 0xe6, 0xe2, 0xcc, 0x14, 0x09, 0x26, 0xb0, 0x20,
	0x88, 0x69, 0x64, 0xc6, 0xc5, 0xe2, 0x58, 0x5a, 0x92, 0x21, 0xa4, 0xc7, 0xc5, 0x0e, 0x35, 0x44,
	0x88, 0x5f, 0x0f, 0xd5, 0x52, 0x29, 0x01, 0x3d, 0x34, 0xf3, 0x95, 0x18, 0x9c, 0xd8, 0xa3, 0x58,
	0xf5, 0xac, 0x8b, 0x0a, 0x92, 0x93, 0xd8, 0xc0, 0x4e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x54, 0xcb, 0x3a, 0x34, 0xba, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	OnLogin(ctx context.Context, in *OnLoginRequest, opts ...grpc.CallOption) (*OnLoginResponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) OnLogin(ctx context.Context, in *OnLoginRequest, opts ...grpc.CallOption) (*OnLoginResponse, error) {
	out := new(OnLoginResponse)
	err := c.cc.Invoke(ctx, "/Auth/OnLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	OnLogin(context.Context, *OnLoginRequest) (*OnLoginResponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_OnLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).OnLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/OnLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).OnLogin(ctx, req.(*OnLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnLogin",
			Handler:    _Auth_OnLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
